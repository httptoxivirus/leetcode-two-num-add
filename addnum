class Solution {
private:
    ListNode* insertAtFirst(int data , ListNode* head) {
        ListNode* newNode = new ListNode;
        newNode->val = data;
        if(head == NULL) {
            head = newNode;
            head->next = NULL;
        }
        else {
            newNode->next = head;
            head = newNode;
        }
        return head;
    }

    ListNode* reverseLl(ListNode* head) {
        // base case
        if(head == NULL || head->next == NULL)
        return head;

        // recurrence relation
        ListNode* chotaHead = reverseLl(head->next);
        head->next->next = head;
        head->next = NULL;
        return chotaHead;
    }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
        return l2;
        else if(l2 == NULL)
        return l1;
        l1 = reverseLl(l1);
        l2 = reverseLl(l2);
        ListNode* l3 = NULL;
        int sum = 0 , carry = 0;
        ListNode* temp1 = l1;
        ListNode* temp2 = l2;
        while(temp1 != NULL || temp2 != NULL) {
            int v1, v2;
            temp1 == NULL ? v1 = 0 : v1 = temp1->val;
            temp2 == NULL ? v2 = 0 : v2 = temp2->val;
            sum = v1 + v2 + carry;
            carry = sum / 10;
            sum = sum % 10;
            l3 = insertAtFirst(sum,l3);
            if(temp1 == NULL)
            temp2 = temp2->next;
            else if(temp2 == NULL)
            temp1 = temp1->next;
            else {
            temp1 = temp1->next;
            temp2 = temp2->next;
            }
        }
        if(carry != 0)
        l3 = insertAtFirst(carry,l3);
        return reverseLl(l3);
    }
};
